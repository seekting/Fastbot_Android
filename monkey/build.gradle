/*
 * Copyright (c) 2020 Bytedance Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @author Zhao Zhang, Yuhui Su
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 32

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        debug{
            debuggable true
        }
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    externalNativeBuild {
        cmake {
            path("../native/CMakeLists.txt")
            version = "3.18.1"
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging false
        }
    }
    ndkVersion '25.2.9519653'

}

repositories {
    maven {
        url "https://dl.google.com/dl/android/maven2/"
    }
}

dependencies {
    compileOnly files('libs/framework.jar')
    implementation 'com.google.code.gson:gson:2.8.9'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            Set<File> fileSet = options.bootstrapClasspath.getFiles()
            List<File> newFileList = new ArrayList<File>()
            newFileList.add(new File("libs/framework.jar"))
            newFileList.addAll(fileSet)
            options.bootstrapClasspath = files(newFileList.toArray())
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/libs/monkey.jar'
}

task makeJar(type: Jar) {
    def srcPath = 'build/intermediates/aar_main_jar/debug/'
    def fileMonkey = file(srcPath+"classes.jar")
    from zipTree(fileMonkey)
    archiveBaseName = 'monkey'
    destinationDirectory = file("build/libs/")
}

makeJar.dependsOn(clearJar, assemble)
